title: Versioned database backups with Git
type: blog-article
category: blog
date: 2012-11-10
tags: [sysadmin, database, git]
snippet: >
    A simple, versioned database backup solution using Git.
---

I'm new to system/database adminstration. I'm currently running two, database-
heavy web applications, the most interesting of which grows by about 60
MiB/day. Here's a simple, versioned database backup solution I came up with
using Git.

### Database backup, with versioning

Backing up your database is important, but one must also consider *versioning*,
i.e., keeping an historical record of your backups over time. If you keep only
the latest backup, but you risk overwriting good backups with bad ones.

You might consider writing each new backup version in its own file, but that
means each backup will consume the entire size of the database each backup (In
my case, 10 GiB per day!) If most of the data in your database is static,
that's a lot of wasted space.

### Enter: Git

[Git][] is a revision control system used primarily by coders to track changes
in their [source code][source-code] over time. A database backup, a.k.a a
[database dump][db-dump], is simply a bunch of SQL statements in a text file,
so why not use Git to track changes in your database backups as well?

[git]:http://en.wikipedia.org/wiki/Git_(software)
[source-code]:http://en.wikipedia.org/wiki/Source_code
[db-dump]:http://en.wikipedia.org/wiki/Database_dump

The backup process is simple. Here's an example backup script using MySQL:

<pre class='prettyprint'>
    #! /bin/sh

    # Settings
    BACKUP_DIR="/path/to/your/backup/directory"
    DB_USER="[your database user]"
    DB_PASS="[your database user's password]"
    DB="[database name]"
    DB_DUMP="$BACKUP_DIR/$DB.sql"

    # Create your backup directory if it doesn't exist
    mkdir -p $BACKUP_DIR

    # Dump the database
    mysqldump -u $DB_USER -p$DB_PASS --skip-extended-insert $DB &gt; $DB_DUMP

    # Change to the backup directory and initialize a new Git repo if necessary
    cd $BACKUP_DIR
    git init

    # Add the database to the repo and commit
    git add $DB_DUMP
    git commit -m "Update database dump"
</pre>

A couple things to note about this script:

- `--skip-extended-insert` makes mysqldump create an insert statement on a new
  line for each row. This means a larger initial commit, but all future commits
  will be smaller due to the fact that Git tracks *line* changes.
- Running `git init` on an existing repository is safe, and will "not overwrite
  things that are already there." - git-init [man page][man-git-init]

[man-git-init]:http://linux.die.net/man/1/git-init
